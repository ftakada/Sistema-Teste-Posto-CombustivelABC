unit Sistema.Model.DAO.Query.Firedac;

interface

uses
  FireDAC.Comp.Client,
  System.SysUtils,
  System.IniFiles,
  FireDAC.Phys.FB,
  FireDAC.Stan.Def,
  FireDAC.Stan.Async,
  FireDAC.DApt,
  Data.DB,
  Sistema.Model.DAO.Interfaces,
  Sistema.Model.Connection.Interfaces;

type

  TModelQueryFiredac = class(TInterfacedObject, iModelQuery)
  private
    FConnectionFactory: iModelConnectionFactory;
    FFDQuery: TFDQuery;
  public
    constructor Create(AConnectionFactory: iModelConnectionFactory);
    destructor Destroy; override;
    class function New(AConnectionFactory: iModelConnectionFactory): iModelQuery;
    function ExecutaSQL(ASQL : string) : iModelQuery;
    function Query: TFDQuery;
    function SQL(ASQL: string): iModelQuery;
    function Open: iModelQuery;
    function Close: iModelQuery;
  end;

implementation

{ TModelQueryFiredac }

function TModelQueryFiredac.Close: iModelQuery;
begin
  Result := Self;
  FFDQuery.Close;
end;

constructor TModelQueryFiredac.Create(AConnectionFactory: iModelConnectionFactory);
begin
  FFDQuery := TFDQuery.Create(nil);
  FFDQuery.Connection := FConnectionFactory.Connection.GetConnection;;
end;

destructor TModelQueryFiredac.Destroy;
begin
  inherited;
  if Assigned(FFDQuery) then
    FFDQuery.Disposeof;
end;

function TModelQueryFiredac.ExecutaSQL(ASQL: string): iModelQuery;
var
  LFDQuery : TFDQuery;
begin
  Result := Self;
  try
    LFDQuery := TFDQuery.Create(nil);
    LFDQuery.Connection := TFDConnection(FConnectionFactory.Connection.GetConnection);
    LFDQuery.ExecSQL(ASQL);
  finally
    LFDQuery.DisposeOf;
  end;
end;

class function TModelQueryFiredac.New(AConnectionFactory: iModelConnectionFactory): iModelQuery;
begin
  Result := Self.Create(AConnectionFactory);
end;

function TModelQueryFiredac.Open: iModelQuery;
begin
  Result := Self;
  FFDQuery.Open;
end;

function TModelQueryFiredac.Query: TFDQuery;
begin
  Result := FFDQuery;
end;

function TModelQueryFiredac.SQL(ASQL: string): iModelQuery;
begin
  Result := Self;
  FFDQuery.SQL.Text := ASQL;
end;

end.

